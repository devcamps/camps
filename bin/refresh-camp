#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use Cwd;
use lib '/home/camp/lib';
use Camp::Master;
use Data::Dumper;
use Pod::Usage;

*STDOUT->autoflush(1);
*STDERR->autoflush(1);

die "Don't run this as root!\n" if $< == 0;

my (%opt, $errmsg, $operation, $showpod);
GetOptions(
    \%opt,
    qw(
        number=i
        usage
        vcs
        db
        files
        config
    )
);

unless (defined $opt{number}) {
    # if not specified, get current camp # from current working directory
    (getcwd) =~ m{/camp(\d+)} and $opt{number} = $1;
}

if ($opt{usage}) {
    $showpod++;
}
elsif (! defined $opt{number}) {
    $errmsg = 'Please specify a camp number';
    $showpod++;
}

if (!$showpod) {
    initialize( camp => $opt{number} );
    die "You are not the owner of camp $opt{number}!\n"
        if $< != camp_user_obj()->uid()
    ;

    if ($opt{vcs}) {
        # Note that vcs_refresh implications are somewhat different for SVN versus SVK.
        vcs_refresh();
        $operation++;
    }

    if ($opt{db}) {
        # Run prepare_database with the force flag so it'll overwrite the existing one.
        prepare_database(1);
        $operation++;
    }

    if ($opt{config}) {
        # Run install_templates to rebuild templated config files and install them
        install_templates();
        $operation++;
    }

    if ($opt{files}) {
        create_camp_subdirectories();

        # process_copy_paths() uses rsync for file copying, so it functions like an update
        process_copy_paths();

        $operation++;
    }

    unless ($operation) {
        $errmsg = 'Please specify the type(s) of refresh to perform.';
        $showpod++;
    }
}

if ($showpod) {
    my %podopt = (
        -exitval => ($errmsg ? 255 : 0),
        -verbose => 2,
    );
    $podopt{'-msg'} = $errmsg if $errmsg;
    pod2usage(%podopt);
}

exit;


=pod

=head1 NAME

refresh-camp - refresh various components within a camp

=head1 VERSION

3.02

=head1 SYNOPSIS

 refresh-camp [options]

The following options are available:

=over

=item I<--usage>

This help message.

=item I<--number>

The number of the camp to refresh; if not specified, attempts to determine the camp
number from the current working directory.

=item I<--config>

Rebuild the templated configuration files of the specified camp.

=item I<--db>

Rebuild the database of the specified camp.

=item I<--files>

Refresh the non-versioned files of the specified camp.

=item I<--vcs>

Perform an update on your camp for the version control system appropriate to that camp.

Note that for svn this corresponds to a simple "up", while for svk it is a "pull".

=back

Note that while use of "--usage" will short-circuit anything else, the other
options may be combined as one sees fit in a single call.

=head1 DISCUSSION

As camps are an intersection of version control and factory-generated configuration
files, it makes sense to understand the implications of a "refresh" before attempting one.

It is assumed that you're using some kind of version control, and that the version control
repository amounts for the bulk of the project.  Performing a "--vcs" refresh will simply
call the version control system's "up" command on the camp/working-copy.

The database is not so easily managed with version control, and it is assumed that there is
always a canonical database schema in existence from which new camp databases are constructed.
Performing a "--db" refresh will wipe out your camp's existing database and replace it with
a freshly-built one.  It doesn't refresh things by merging changes, it merely replaces
whatever's in your camp with what's in the canonical database source.  So, this is a destructive
refresh; it isn't potentially additive or a merge the way a "--vcs" refresh is.

It is commonly the case that certain files in a system do not apply readily to version
control, for whatever reason, and are managed differently.  The "copy paths" portion of
Camp::Master accounts for this, and using the "--file" refresh will cause all files managed
through the copy-paths.yml config for your camp type to be updated appropriately (typically
via rsync) from the canonical source.  This probably means that any custom files you had
in these paths would be lost.

=head1 AUTHOR

Ethan Rowe E<lt>ethan@endpoint.comE<gt> and other contributors

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2006-2011 End Point Corporation, http://www.endpoint.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see: http://www.gnu.org/licenses/

=cut
