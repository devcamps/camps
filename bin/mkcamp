#!/usr/local/bin/perl

use strict;
use warnings;
use Getopt::Long;
use lib '/home/camp/lib';
use Camp::Master;
use Data::Dumper;

*STDOUT->autoflush(1);
*STDERR->autoflush(1);

die "Don't run this as root!\n" if $< == 0;

my %opt;
GetOptions(
    \%opt,
    qw(
        comment=s
        number=i
        replace!
        skipdb
        skipcamp
        skipvcs
        help
        type=s
        vcs=s
        ignore-size-warning
    )
);

if ($opt{help}) {
    my $types;
    eval {
        $types = join '', map { <<EOL } camp_type_list();
                $_->{type}: $_->{description}
EOL
    };
    $types = "Could not find types: $@" if $@;
    print <<EOH;
Usage: mkcamp --comment="comments here" [options]

Options:

--comment   Required comment explaining the purpose of this new camp.

--number    Specify the camp number to be made instead of automatically
            determining it.

--skipcamp  Do not add this camp to the database. Requires --number.

--skipdb    Skip database creation.

--skipvcs   Skip version control clone/checkout.

--vcs       Specify version control system to use for working copy checkout.
            Options are "svn", "svk", and "git".
            The camp type requested may provide a default, and determines
            which options actually work.

--type      The type of camp to be made; required.
            Available types are:
$types

--help      This help screen
EOH
    exit;
}

$opt{type} = default_camp_type() and print "Defaulting to camp type: $opt{type}\n"
    if !defined($opt{type});

die "No type specified!\n" unless defined $opt{type};

die "comment is required; run with --help for more info\n"
    unless $opt{comment} or $opt{skipcamp};

initialize(
    type => $opt{type},
    vcs_type => $opt{vcs},
    user => $<,
);

# Make sure we have enough disk space for our camp and database
if (!$opt{skipdb}) {
    ## check_camp_size();
    ## check_db_size();
}

# Get camp # and verify everything's ok with camp database
unless (defined($opt{number}) and $opt{number} =~ /^\d+$/) {
    if ($opt{skipcamp}) {
        die "number must be specified if skipping camp accounting\n";
    }
    $opt{number} = get_next_camp_number();
}

# initialize the configuration hash
my $conf = config_hash( $opt{number} );
print "Configuration hash:\n", Dumper($conf);

# Add to camp database
register_camp($opt{comment}) unless $opt{skipcamp};

# Make camp base directory and/or check out files from version control repository
if ($opt{skipvcs}) {
    create_camp_path($conf->{number}, $opt{replace});
}
else {
    vcs_checkout($opt{replace});
}

# Must prepare database before installing templates; do so now.
prepare_database($opt{replace}) unless $opt{skipdb};

# Create needed empty directories
create_camp_subdirectories();

# Perform simple copy/symlink operations
process_copy_paths();

# Substitute tokens in config files
install_templates();

# Prepare appserver(s)
prepare_ic();
prepare_rails();

# Create Apache files
prepare_apache();

# (Re)start facilities
if ($opt{skipdb}) {
    print <<'END';

Of course, you specified --skipdb, so there may be no database, and
your app server is not running. It's up to you to deal with that.
END
}
else {
    server_control(
        service => 'all',
        action  => 'restart',
    );
    server_control(
        service => 'app',
        action  => 'init',
    );
}


if ($opt{skipcamp}) {
    print <<'END';

You specified --skipcamp, so there has been no accounting of this camp
instance in the camps table in the camp database. Please deal with that
however is appropriate.
END
}


=pod

=head1 NAME

mkcamp - create a new camp

=head1 VERSION

3.03

=head1 SYNOPSIS

=over

=item I<mkcamp> --comment="<comments>" --type=<type> [--number=<camp #>] [--skipcamp] [--skipdb] [--vcs=<svn|svk|git>] [--help]

=back

=head1 DESCRIPTION

Creates a new camp and registers it in the camp database.

A comment explaining the use of the new camp is required. This should likely be enclosed in quotes to work with your shell.

Unless there is only one camp type available, the type must be specified as well.

=head1 OPTIONS

=over

=item --comment="<comments>"

Required comment explaining the purpose of this new camp.

=item --type=<type>

The type of camp to be made; if there is only one type, mkcamp will set the --type automatically.

=item --number=<camp number>

Specify the camp number to be made instead of automatically determining it. Required if --skipcamp is used.

=item --skipcamp

Do not add this camp to the database (arguments of --comment will not be passed if this option is used). Requires --number to be set.

=item --skipdb

Skip database creation.

=item --vcs=<svn|svk|git>

Optionally specify version control system to use for working copy checkout. The camp type requested should provide a default, and determines which options actually work. This is normally used only to make an svk camp when svn is the default.

=item --help

Displays the help menu and list of camp types based on Camp Master Database configuration.

=back

=head1 AUTHOR

Ethan Rowe E<lt>ethan@endpoint.comE<gt> and other contributors

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2006-2011 End Point Corporation, http://www.endpoint.com/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see: http://www.gnu.org/licenses/

=cut
